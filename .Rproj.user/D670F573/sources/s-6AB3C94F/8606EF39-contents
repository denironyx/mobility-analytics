---
title: "PROJECT GEOSPATIAL DEVELOPER @TRIPLY"
output: html_notebook
---
# Introduction

## The process

* Situation Definition
* Problem Definition
* Proposed solution
* Analysis and visualization

## Step 1
### Situation Definition
I tried to identify the scope of the situation by properly defining it. In this phase, I research the basic factors that created the present mobility situation for The City of Hartberg (Styria). Information about the surrounding area, its people (demographic), and their travel habits. In this task, it was understood that there has been a minor influx and an estimated **increase of the population by about 10%**.

### Problem Definition 
Next, Problem Definition. I thought about the problem in terms of the objectives to be accomplished by the project and to translate those objectives into criteria that can be quantified. And, in this task. 

The objectives include the following:

* Visualize the potential impact of change of schedule in the existing CityBus schedule.
* Predict the potential import of change of the existing CityBus schedule.

### Propose solution
Afterward, I thought about geographic analysis modeling which includes providing descriptive overviews of the datasets available involving.

* Trip generation (the number of trips generated by each zone in a region) is influenced by geographic factors such as the number of buildings in the direct surrounding.
* The distribution of these trips to destinations depends on explicitly geographic factors such as absolute and relative distances.

Data source:

* [GTFS](https://transitfeeds.com/p/weiner-lienen):
  GTFS stands for “General Transit Feed Specification” and is a world known open source standard for transit agencies. If you belong to the transit world, I’m sure you already know the basics of the information you can manage with it (it is, among other things, how transit agencies communicate with Google Maps). 


## Step 2

### Data Analysis
```{r }
library(tidyverse)
library(pryr)
library(dplyr)
library(ggplot2)
```

### Importing data into R
```{r}
zip <- "data/Austria/gtfs.zip"
unzip(zip, exdir = "data/Austria")
trips <- read_csv("data/Austria/trips.txt")
routes <- read_csv("data/Austria/routes.txt")
stop_times <- read_csv("data/Austria/stop_times.txt", col_types= cols(arrival_time = col_character(), departure_time = col_character()))
```

## Joining the data frames
I am going to get the number of trips per hour from the "stop_times" data frame. The tricky thing is that in "stop_times' there is no variable that tells me what route the trip is doing. To get that information I first have to pass through 'trips'. This data frame is the one that holds the relationship between the 'trip_id' (present in 'stop_times') and the 'route_id' (present in routes).
```{r}
stop_times  <- stop_times %>% 
  left_join(trips) %>% 
  left_join(routes) %>% 
  select(route_id, route_short_name, trip_id, stop_id, service_id, arrival_time, departure_time, direction_id, shape_id, stop_sequence)
```
First I join stop_times with trips. At that point, the data frame has the route_id and the trip_id. Then i join it with routes

```{r}
head(stop_times)
```
Right now, I have the passing time for all the stops (check the column 'stop_sequence'). But wIonly need the first stop to calculate the number of trips per hour. Furthermore, considering that the trips are roundtrips, I only need one direction. If not, I could be duplicating the number of trips per hour.

Also, notice that the 'arrival_time' and 'departure_time' are characters. This wouldn't allow me to make mathematical operations with them.

Finally, the column 'service_id' tells me that there are many different services that operate in the period of time this GTFS covers. I need to choose one before calculating the number of trips per hour.

## Filtering and Transforming data
### Selecting the service_id with more trips

To solve the issues listed above I can first start by looking for the 'service_id' I want to use. I could do it in many different ways and, if I was using the `triply` dataset, the most probable 'service_id' would be `citybus` service that I will want to analyze. For the purpose of this exercise, I will just take the service with more trips.
```{r}
trips %>% 
  group_by(service_id) %>% 
  count(service_id) %>% 
  arrange(desc(n))
```
The biggest service in this dataset seems to be 'T8+cor2', so I will take that one to filter.

```{r}
bigger_service <- trips %>% 
  group_by(service_id) %>% 
  count(service_id) %>% 
  arrange(desc(n)) %>% 
  head(1)

bigger_service
```
### Question 1
#### What bus service have the highest trip
The service_id with the highest trip is T8+cor2 with a total trips of 23207
```
service_id  n
T8+cor2   	23207	
```
## Filtering by service_id, stop_sequence and direction_id
Now, I can filter 'stop_times' in order to keep only the relevant information for my purpose.
```{r}
stop_times <- stop_times %>% 
  filter(
    stop_sequence == 1 &
      direction_id == 0 &
      service_id == bigger_service$service_id
  )
head(stop_times)
```
## Transforming characters into numbers
Now that I have only kept the data relevant for my purpose. I need to transform the 'arrival_time' and 'departure_time' (or at least one of them) into numbers that allow us to make mathematical operations with them.

In fact, since I am going to calculate the number of trips per hour, I don't really need the minutes. I would just need to get the hours value to be able to group them afterwards. Like that, characters like '07:28:00' and '07:45:00' would become the number '7' that is enough for me to calculate that there are two trips per hour from 7am to 8am.

This would be easy if I only had to take the hours number. The tricky part comes when I find numbers that go beyond the 24hs. In this case, '25:00:00' actually means 1am. I will make a transformation in order to solve this issue.

```{r}
stop_times <- stop_times %>% 
  mutate(
    arrival_time = ifelse(
      as.integer(substr(arrival_time, 1, 2)) < 24,
      as.integer(substr(arrival_time, 1, 2)), 
      as.integer(substr(arrival_time, 1, 2)) - 24),
    departure_time = ifelse(
      as.integer(substr(departure_time, 1, 2)) < 24,
      as.integer(substr(departure_time, 1, 2)),
      as.integer(substr(departure_time, 1, 2)) - 24)
  )
head(stop_times)
```
It is looking pretty good now. Notice that I had to run an 'ifelse' condition to treat the numbers that were higher than 24. If they were, I took 24 from them. Like that, 25h becomes 1h, that was exactly what I was looking for.

Also, I only kept the hours of the arrival and departure time. Now, I could group by one of those variables and count the number of trips on each of the time windows.

## So, what is the number of trips per hour for each of these lines?

The final step is to calculate the number of trips per hour for each of the lines. Thanks to all the trouble we went through, this is going to be pretty easy now.

```{r}
output_data <- stop_times %>% 
  group_by_at(vars(route_id, route_short_name,arrival_time)) %>% 
  count(arrival_time)
head(output_data)
```
I have now, the number of trips per hour for each of the lines.

I made it nicer nonetheless. To do so, I had to the format of 'arrival_time' one more time, from '6' to '6:00'
```{r}
output_data <- stop_times %>% 
  group_by_at(vars(route_id, route_short_name, arrival_time)) %>% 
  count(arrival_time) %>% 
  mutate(time_window = paste(arrival_time, "00", sep = ':')) %>% 
  select(route_id, route_short_name, arrival_time, time_window, n)
head(output_data)
```
## Creating charts with the number of trips per hour
In this section I decided to create some charts to better understand the data I have transformed so far.

```{r}
line <- output_data %>% 
  filter(route_id == '22-10-j20-1')

## factorise "time_window"
line$time_window <- factor(line$time_window, levels = unique(line$time_window))
```
### Bar chart
```{r}
g_bar <- ggplot(data = line,
            aes(x = time_window, y = n)) + 
  geom_bar(stat = 'identity', fill = 'steelblue', color = 'steelblue') + 
  geom_text(aes(label = n), 
            vjust = -0.3, 
            color = "black", 
            size = 3) +
  scale_fill_brewer(palette="Dark2")+
  labs(title = paste('Trips by hour for route', line$route_short_name, sep = ' '),
       x = "Time window",
       y = '') +
  theme(panel.grid = element_blank(), 
        panel.background = element_blank(), 
        axis.line.x = element_line(colour = "grey"), 
        axis.line.y = element_blank(),
        axis.text.x = element_text(angle = 90, hjust = 1),
        axis.text.y = element_blank(),
        axis.ticks.x = element_line(colour = "grey"),
        axis.ticks.y = element_blank(),
        plot.title = element_text(hjust = 0.5) 
        )

g_bar
```


## Line chart
```{r}
g_line <- ggplot(data = line,
            aes(x = time_window, y = n, group = 1)) + 
  geom_line(color = 'steelblue') +
  geom_point(color = 'steelblue') +
  geom_text(aes(label = n), 
            vjust = -0.8,
            color = "black",
            size = 3) +
  scale_fill_brewer(palette="Dark2")+
  labs(title = paste('Trips by hour for route', line$route_short_name, sep = ' '),
        x = "Time window",
        y = '') +
  theme(panel.grid = element_blank(),
        panel.background = element_blank(),
        axis.line.x = element_line(colour = "grey"),
        axis.line.y = element_blank(),
        axis.text.x = element_text(angle = 90, hjust = 1),
        axis.text.y = element_blank(),
        axis.ticks.x = element_line(colour = "grey"),
        axis.ticks.y = element_blank(),
        plot.title = element_text(hjust = 0.5)
        )

g_line
```
